xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128,
y=x_pred[99:128],
type='l', col='red')
lines(x=99:128,
y=x_pred[99:128],
type='l', col='red', lwd=3)
x_pred <- predict(lt, data.frame(t=99:128)) + as.numeric(ar1_pred_fn$pred)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128,
y=x_pred[99:128],
type='l', col='red', lwd=3)
x_pred <- predict(lt, data.frame(t=99:128)) + as.numeric(ar1_pred_fn$pred)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128,
y=x_pred,
type='l', col='red')
e_resid <- (1-phi^(2*m)) / (1 - phi^2)
e_resid
e_resid <- var(ar1$residuals) #(1-phi^(2*m)) / (1 - phi^2)
e_redid
e_resid
ar1$residuals
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
e_resid
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=u+x_pred, lty=2, col="blue")
lines(x = 99:128, y = l+x_pred, lty=2, col="blue")
l
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=u+x_pred, lty=2, col="blue")
lines(x = 99:128, y=x_pred-l, lty=2, col="blue")
u
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=u+x_pred, lty=2, col="blue")
# lines(x = 99:128, y=l+x_pred, lty=2, col="blue")
U <- ar1_pred_fn$pred + 1.96*ar1_pred_fn$se
L <- ar1_pred_fn$pred - 1.96*ar1_pred_fn$se
U
L <- ar1_pred_fn$pred - 1.96*ar1_pred_fn$se
L
plot(LakeHuron)
U
ar1_pred_fn$pred
#AR(1)
# arima.sim is useful for simulating arma processes
dts <- arima.sim(list(order = c(1,0,0), ar = 0.7), n = 100)
plot(dts, type = "o", main = "Simulated AR(1) Dataset", ylab = "Data")
#Fit AR(1) to the data:
arfit = arima(dts, order = c(1, 0, 0), method = "CSS-ML")
#Forecasting with ARIMA models
fcast = predict(arfit, n.ahead = m)
str(arfit)
U = fcast$pred + 2*fcast$se
L = fcast$pred - 2*fcast$se
newx = 1:(100 + m)
newy = c(dts, fcast$pred)
plot(newx, newy, type = "l")
points(newx[101:(100+m)], fcast$pred + 2*fcast$se, col = "blue", type = "l")
points(newx[101:(100+m)], fcast$pred - 2*fcast$se, col = "blue", type = "l")
U
dts
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- x_pred - as.numeric(ar1_pred_fn$pred) + e_resid + 1.96 * sd(lt_resid)
l <- x_pred - as.numeric(ar1_pred_fn$pred) + e_resid + 1.96 * sd(lt_resid)e_resid - 1.96 * sd(lt_resid)
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- x_pred - as.numeric(ar1_pred_fn$pred) + e_resid + 1.96 * sd(lt_resid)
l <- x_pred - as.numeric(ar1_pred_fn$pred) + e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=u, lty=2, col="blue")
lines(x = 99:128, y=l, lty=2, col="blue")
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=u, lty=2, col="blue")
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + u, lty=2, col="blue")
lines(x = 99:128, y=x_pred + l, lty=2, col="blue")
e_resid <- var(lt_resid) * (1-phi^(2*m)) / (1 - phi^2)
u <- e_resid + 1.96 * sd(lt_resid)
l <- e_resid - 1.96 * sd(lt_resid)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + u, lty=2, col="blue")
lines(x = 99:128, y=x_pred - l, lty=2, col="blue")
U = fcast$pred + 2*fcast$se
L = fcast$pred - 2*fcast$se
plot(newx, newy, type = "l")
points(newx[101:(100+m)], fcast$pred + 2*fcast$se, col = "blue", type = "l")
points(newx[101:(100+m)], fcast$pred - 2*fcast$se, col = "blue", type = "l")
U <- ar1_pred_fn$pred + 1.96*ar1_pred_fn$se
L <- ar1_pred_fn$pred - 1.96*ar1_pred_fn$se
U
L
U <- ar1_pred_fn$pred + 1.96*ar1_pred_fn$se
L <- ar1_pred_fn$pred - 1.96*ar1_pred_fn$se
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + U, lty=2, col="blue")
lines(x = 99:128, y=x_pred + L, lty=2, col="blue")
ar1$sigma2
e_resid <- ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2)
e_resid
e_resid <- ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2)
u <- e_resid + 1.96 * sqrt(ar1$sigma2)
l <- e_resid - 1.96 * sqrt(ar1$sigma2)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + u, lty=2, col="blue")
lines(x = 99:128, y=x_pred + l, lty=2, col="blue")
e_resid <- ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2)
u <- e_resid + 1.96 * sqrt(ar1$sigma2/n)
ar1$residuals
e_resid <- ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2)
u <- e_resid + 1.96 * sqrt(ar1$sigma2/length(LakeHuron))
l <- e_resid - 1.96 * sqrt(ar1$sigma2/length(LakeHuron))
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + u, lty=2, col="blue")
lines(x = 99:128, y=x_pred + l, lty=2, col="blue")
ar1$coef
e_resid <- ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2)
u <- e_resid + 1.96 * sqrt(ar1$sigma2)
l <- e_resid - 1.96 * sqrt(ar1$sigma2)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + u, lty=2, col="blue")
lines(x = 99:128, y=x_pred + l, lty=2, col="blue")
U <- mean(ar1_pred_fn$pred) + 1.96*ar1_pred_fn$se
L <- mean(ar1_pred_fn$pred) - 1.96*ar1_pred_fn$se
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + U, lty=2, col="blue")
lines(x = 99:128, y=x_pred + L, lty=2, col="blue")
e_resid <- 2 * (ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2))
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + e_resid, lty=2, col="blue")
lines(x = 99:128, y=x_pred - e_resid, lty=2, col="blue")
lt$coefficients
ar1$coef
ar1$coef[2]
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi + ar1$coef[[2]]
}
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi
}
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
ar1_pred
ar1_pred_fn$pred
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi - ar1$coef[[2]]
}
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi #- ar1$coef[[2]]
}
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
ar1_pred
ar1_pred_fn$pred
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi + ar1$coef[[2]]
}
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
ar1_pred
ar1$coef
m <- 30
ar1_pred <- rep(0, 30)
phi <- ar1$coef[[1]]
ar1_pred[1] <- lt_resid[length(LakeHuron)] * phi
for (i in 2:m) {
ar1_pred[i] <- ar1_pred[i-1] * phi
}
ar1_pred <- ar1_pred + ar1$coef[[2]]
ar1_pred_fn <- predict(ar1, n.ahead = m)
plot(x = 1:m, y = ar1_pred,
type="l", col = "blue",
main = "Comparing Predicted Residuals",
xlab = "Time ahead",
ylab = "Predicted Residual")
lines(x = 1:m, y = ar1_pred_fn$pred, col="red")
legend(20, 1.5, legend=c("manual", "predict function"),
col=c("blue", "red"), lty=c(1,1), cex=0.8)
x_pred <- predict(lt, data.frame(t=99:128)) + as.numeric(ar1_pred_fn$pred)
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
e_resid <- 2 * (ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2))
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + e_resid, lty=2, col="blue")
lines(x = 99:128, y=x_pred - e_resid, lty=2, col="blue")
U <- mean(ar1_pred_fn$pred) + 1.96*ar1_pred_fn$se
L <- mean(ar1_pred_fn$pred) - 1.96*ar1_pred_fn$se
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + U, lty=2, col="blue")
lines(x = 99:128, y=x_pred + L, lty=2, col="blue")
e_resid <- 1.96 * (ar1$sigma2 * (1-phi^(2*(1:m))) / (1 - phi^2))
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + e_resid, lty=2, col="blue")
lines(x = 99:128, y=x_pred - e_resid, lty=2, col="blue")
U <- mean(ar1_pred_fn$pred) + 1.96*ar1_pred_fn$se
L <- mean(ar1_pred_fn$pred) - 1.96*ar1_pred_fn$se
plot(c(LakeHuron, x_pred), type='l',
xlab="Years since 1880",
ylab="LakeHuron")
lines(x=99:128, y=x_pred,
type='l', col='red')
lines(x = 99:128, y=x_pred + U, lty=2, col="blue")
lines(x = 99:128, y=x_pred + L, lty=2, col="blue")
shiny::runApp('STMCE-SNF')
?arma.spec
??arma.spec
library(astsa)
# Plot spectral density
?arma.spec
# Plot spectral density
arma.spec(ar=c(-1,0.9))
# Plot spectral density
arma.spec(ar=c(1,-0.9))
arma.spec(ar=c(1,-0.9), type='o')
arma.spec(ar=c(1,-0.9))
?arma.sim
??arma.sim
?arima.sim
arima.sim(n=50, list(ar=c(1,-0.9)))
?sim
sim <- arima.sim(n=50, list(ar=c(1,-0.9)))
plot(sim, type='l')
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
set.seed(207)
arma.spec(ar=c(1,-0.9))
sim <- arima.sim(n=50, list(ar=c(1,-0.9)))
plot(sim, type='l')
ex <- arma.spec(ar=c(1,-0.9))
ex$freq
which.max(ex$spec)
ex$freq(which.max(ex$spec))
ex$freq[which.max(ex$spec)]
ex$freq[which.max(ex$spec)+1]
ex$freq[which.max(ex$spec)+2]
ex$spec[which.max(ex$spec)+1]
ex$spec[which.max(ex$spec)]
ex$spec[which.max(ex$spec)+2]
ex$spec[which.max(ex$spec)+3]
p <- 1/ex$freq[which.max(ex$spec)]
1:3
p <- (1:10) /ex$freq[which.max(ex$spec)]
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
set.seed(207)
rm(ex)
spec <- arma.spec(ar=c(1,-0.9))
sim <- arima.sim(n=50, list(ar=c(1,-0.9)))
p <- (1:10) /spec$freq[which.max(spec$spec)]
plot(sim, type='l')
abline(v=p)
plot(sim, type='l')
abline(v=p, lty=2)
spec$freq[which.max(spec$spec)
]
spec <- arma.spec(ar=c(0, -0.3, 0, -0.9))
sim <- arima.sim(n=50, list(ar=c(0, -0.3, 0, -0.9)))
p1 <- (1:10) / 0.14
p2 <- (1:10) / 0.36
plot(sim, type='l')
abline(v=p1, lty=2, col='red')
abline(v=p2, lty=2, col='blue')
plot(sim, type='l')
abline(v=p1, lty=2, col='red')
plot(sim, type='l')
abline(v=p1, lty=2, col='red')
plot(sim, type='l')
# abline(v=p1, lty=2, col='red')
abline(v=p2, lty=2, col='blue')
p2 <- (1:20) / 0.36
plot(sim, type='l')
# abline(v=p1, lty=2, col='red')
abline(v=p2, lty=2, col='blue')
plot(sim, type='l')
abline(v=p1, lty=2, col='red')
plot(sim, type='l')
spec <- arma.spec(ar=c(0, 0, 0, 0, 0.9))
sim <- arima.sim(n=50, list(ar=c(0, 0, 0, 0, 0.9)))
# p <- (1:10) /spec$freq[which.max(spec$spec)]
plot(sim, type='l')
# abline(v=p, lty=2)
p <- (1:10) / 0.2
plot(sim, type='l')
abline(v=p, lty=2)
# p <- (1:10) / 0.2
plot(sim, type='l')
arma.spec(ar=c(0,0,0.9), type='l')
sim <- arima.sim(n=50, list(ar=c(0, 0, 0.9)))
plot(sim, type='l')
plot(sim, type='l')
p = (1:10) / 0.2
plot(sim, type='l')
abline(v = p)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
set.seed(207)
spec <- arma.spec(ar=c(1,-0.9))
sim <- arima.sim(n=50, list(ar=c(1,-0.9)))
plot(sim, type='l')
abline(v=p, lty=2)
spec <- arma.spec(ar=c(0, -0.3, 0, -0.9))
sim <- arima.sim(n=50, list(ar=c(0, -0.3, 0, -0.9)))
plot(sim, type='l')
spec <- arma.spec(ar=c(0, 0, 0, 0, 0.9))
sim <- arima.sim(n=50, list(ar=c(0, 0, 0, 0, 0.9)))
p = (1:10) / 0.2
plot(sim, type='l')
abline(v = p)
p = (1:10) / 0.33
plot(sim, type='l')
abline(v=p)
sim <- arima.sim(n=50, list(ar=c(0, 0, 0.9)))
p = (1:20) / 0.33
plot(sim, type='l')
abline(v=p)
1/0.33
plot(sim, type='l')
abline(v=p, lty=2)
shiny::runApp('STMCE-SNF')
?rename
?write_csv
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
set.seed(207)
?arma.spec
shiny::runApp('STMCE-SNF')
# Load all the necessary functions
source("helpers.R")
# ====== Packages ======
required_packages <- c("dplyr",
"DT",
"data.table",
"ggplot2",
"readr",
"shiny",
"shinyjs",
"tidyr",
"readxl")
uninstalled_packages <- required_packages[!(required_packages %in% installed.packages()[,'Package'])]
if (length(uninstalled_packages) > 0) {
install.packages(uninstalled_packages, dependencies = TRUE, repos = 'http://cran.us.r-project.org')
}
lapply(required_packages, require, character.only = TRUE)
rm(required_packages)
rm(uninstalled_packages)
# ====== Multi-criteria analysis ======
# Parameters
params <- readr::read_csv(file="parameters.txt",
col_names=c("filename", "range", "n_sample", "tabname"))
# Number of multi-criteria analyses
N <- nrow(params)
# Cell range
parsed_ranges <- lapply(1:N, parseRange)
CELL_RANGE <- c(LETTERS, paste0("A", LETTERS))
# Alternatives
alternatives <- readxl::read_excel(
path = params$filename[1],
range = paste0(parsed_ranges[[1]]$letters[1], '2:', parsed_ranges[[1]]$letters[2], '2'),
col_names = F
)
alternatives <- as.character(alternatives[1,])
runApp('STMCE-SNF')
is.numeric("2")
shiny::runApp('STMCE-SNF')
runApp('STMCE-SNF')
shiny::runApp('STMCE-SNF')
shiny::runApp('STMCE-SNF')
